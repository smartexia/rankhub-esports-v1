2025-Aug-24 23:12:32.631336
Starting deployment of smartexia/rankhub-esports-v1:main to localhost.
2025-Aug-24 23:12:32.822341
Preparing container with helper image: ghcr.io/coollabsio/coolify-helper:1.0.8.
2025-Aug-24 23:12:32.945691
[CMD]: docker stop --time=30 s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:32.945691
Error response from daemon: No such container: s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:33.055572
[CMD]: docker rm -f s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:33.055572
Error response from daemon: No such container: s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:33.212712
[CMD]: docker run -d --network coolify --name s8kwsgsw0wcgos8og08088c0 --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/coollabsio/coolify-helper:1.0.8
2025-Aug-24 23:12:33.212712
76106bf56627f48a7fec1be92995237ec90964283be147e37eed0ad080a8a8f8
2025-Aug-24 23:12:34.858307
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'GIT_SSH_COMMAND="ssh -o ConnectTimeout=30 -p 22 -o Port=22 -o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" git ls-remote https://x-access-token:<REDACTED>@github.com/smartexia/rankhub-esports-v1.git main'
2025-Aug-24 23:12:34.858307
be8d8d3cf434a66b7392b7a5d076f35380faadaa	refs/heads/main
2025-Aug-24 23:12:35.183438
----------------------------------------
2025-Aug-24 23:12:35.187130
Importing smartexia/rankhub-esports-v1:main (commit sha HEAD) to /artifacts/s8kwsgsw0wcgos8og08088c0.
2025-Aug-24 23:12:35.346048
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'git clone -b "main" https://x-access-token:<REDACTED>@github.com/smartexia/rankhub-esports-v1.git /artifacts/s8kwsgsw0wcgos8og08088c0 && cd /artifacts/s8kwsgsw0wcgos8og08088c0 && GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" git submodule update --init --recursive && cd /artifacts/s8kwsgsw0wcgos8og08088c0 && GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" git lfs pull'
2025-Aug-24 23:12:35.346048
Cloning into '/artifacts/s8kwsgsw0wcgos8og08088c0'...
2025-Aug-24 23:12:36.280912
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'cd /artifacts/s8kwsgsw0wcgos8og08088c0 && git log -1 be8d8d3cf434a66b7392b7a5d076f35380faadaa --pretty=%B'
2025-Aug-24 23:12:36.280912
fix(nginx): corrige sintaxe invÃ¡lida em gzip_proxied no nginx.conf
2025-Aug-24 23:12:36.400564
[CMD]: docker images -q y8k8ckowcggooc440ogskkok:be8d8d3cf434a66b7392b7a5d076f35380faadaa 2>/dev/null
2025-Aug-24 23:12:36.400564
ee4313e8febc
2025-Aug-24 23:12:36.411927
Configuration changed. Rebuilding image.
2025-Aug-24 23:12:37.269538
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'cat /artifacts/s8kwsgsw0wcgos8og08088c0/Dockerfile'
2025-Aug-24 23:12:37.269538
# Build stage
2025-Aug-24 23:12:37.269538
FROM node:18-alpine AS builder
2025-Aug-24 23:12:37.269538
WORKDIR /app
2025-Aug-24 23:12:37.269538
# Install build dependencies and yarn (add TLS certs and openssl)
2025-Aug-24 23:12:37.269538
RUN apk add --no-cache python3 make g++ yarn git curl ca-certificates openssl && update-ca-certificates
2025-Aug-24 23:12:37.269538
# Prefer IPv4 to avoid flaky IPv6 DNS in some environments
2025-Aug-24 23:12:37.269538
ENV NODE_OPTIONS="--dns-result-order=ipv4first"
2025-Aug-24 23:12:37.269538
# Copy package files
2025-Aug-24 23:12:37.269538
COPY package*.json ./
2025-Aug-24 23:12:37.269538
# Keep lockfiles for reproducible installs (package-lock.json, bun.lockb)
2025-Aug-24 23:12:37.269538
# Remove npm completely and use only yarn
2025-Aug-24 23:12:37.269538
RUN set -e && \
2025-Aug-24 23:12:37.269538
# Remove npm to avoid conflicts
2025-Aug-24 23:12:37.269538
rm -rf /usr/local/bin/npm /usr/local/bin/npx && \
2025-Aug-24 23:12:37.269538
# Clean all possible caches
2025-Aug-24 23:12:37.269538
rm -rf ~/.npm ~/.yarn-cache ~/.cache && \
2025-Aug-24 23:12:37.269538
rm -rf node_modules && \
2025-Aug-24 23:12:37.269538
# Configure yarn with multiple registry fallbacks and strict SSL
2025-Aug-24 23:12:37.269538
yarn config set network-timeout 300000 && \
2025-Aug-24 23:12:37.269538
yarn config set network-concurrency 1 && \
2025-Aug-24 23:12:37.269538
yarn config set network-retry 10 && \
2025-Aug-24 23:12:37.269538
yarn config set strict-ssl true && \
2025-Aug-24 23:12:37.269538
# Try multiple registries as fallback (npmjs -> yarnpkg -> npmmirror -> no-lockfile)
2025-Aug-24 23:12:37.269538
(yarn config set registry https://registry.npmjs.org/ && yarn install --network-timeout 300000) || \
2025-Aug-24 23:12:37.269538
(yarn config set registry https://registry.yarnpkg.com/ && yarn install --network-timeout 300000) || \
2025-Aug-24 23:12:37.269538
(yarn config set registry https://registry.npmmirror.com/ && yarn install --network-timeout 300000) || \
2025-Aug-24 23:12:37.269538
(yarn config set registry https://registry.npmjs.org/ && yarn install --no-lockfile --network-timeout 300000) && \
2025-Aug-24 23:12:37.269538
# Verify installation and install vite explicitly if missing
2025-Aug-24 23:12:37.269538
(yarn list vite || yarn add vite@^5.4.19 --dev --network-timeout 300000) && \
2025-Aug-24 23:12:37.269538
echo "Dependencies installed successfully"
2025-Aug-24 23:12:37.269538
# Copy source code
2025-Aug-24 23:12:37.269538
COPY . .
2025-Aug-24 23:12:37.269538
# Build the application using yarn
2025-Aug-24 23:12:37.269538
RUN yarn build
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Production stage
2025-Aug-24 23:12:37.269538
FROM nginx:alpine
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Install curl for health checks
2025-Aug-24 23:12:37.269538
RUN apk add --no-cache curl
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Copy built files
2025-Aug-24 23:12:37.269538
COPY --from=builder /app/dist /usr/share/nginx/html
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Copy nginx configuration
2025-Aug-24 23:12:37.269538
COPY nginx.conf /etc/nginx/conf.d/default.conf
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Create nginx user and set permissions
2025-Aug-24 23:12:37.269538
RUN chown -R nginx:nginx /usr/share/nginx/html && \
2025-Aug-24 23:12:37.269538
chmod -R 755 /usr/share/nginx/html
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Expose port
2025-Aug-24 23:12:37.269538
EXPOSE 80
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Health check
2025-Aug-24 23:12:37.269538
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
2025-Aug-24 23:12:37.269538
CMD curl -f http://localhost/health || exit 1
2025-Aug-24 23:12:37.269538
2025-Aug-24 23:12:37.269538
# Start nginx
2025-Aug-24 23:12:37.269538
CMD ["nginx", "-g", "daemon off;"]
2025-Aug-24 23:12:37.626633
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'cat /artifacts/s8kwsgsw0wcgos8og08088c0/Dockerfile'
2025-Aug-24 23:12:37.626633
# Build stage
2025-Aug-24 23:12:37.626633
FROM node:18-alpine AS builder
2025-Aug-24 23:12:37.626633
WORKDIR /app
2025-Aug-24 23:12:37.626633
# Install build dependencies and yarn (add TLS certs and openssl)
2025-Aug-24 23:12:37.626633
RUN apk add --no-cache python3 make g++ yarn git curl ca-certificates openssl && update-ca-certificates
2025-Aug-24 23:12:37.626633
# Prefer IPv4 to avoid flaky IPv6 DNS in some environments
2025-Aug-24 23:12:37.626633
ENV NODE_OPTIONS="--dns-result-order=ipv4first"
2025-Aug-24 23:12:37.626633
# Copy package files
2025-Aug-24 23:12:37.626633
COPY package*.json ./
2025-Aug-24 23:12:37.626633
# Keep lockfiles for reproducible installs (package-lock.json, bun.lockb)
2025-Aug-24 23:12:37.626633
# Remove npm completely and use only yarn
2025-Aug-24 23:12:37.626633
RUN set -e && \
2025-Aug-24 23:12:37.626633
# Remove npm to avoid conflicts
2025-Aug-24 23:12:37.626633
rm -rf /usr/local/bin/npm /usr/local/bin/npx && \
2025-Aug-24 23:12:37.626633
# Clean all possible caches
2025-Aug-24 23:12:37.626633
rm -rf ~/.npm ~/.yarn-cache ~/.cache && \
2025-Aug-24 23:12:37.626633
rm -rf node_modules && \
2025-Aug-24 23:12:37.626633
# Configure yarn with multiple registry fallbacks and strict SSL
2025-Aug-24 23:12:37.626633
yarn config set network-timeout 300000 && \
2025-Aug-24 23:12:37.626633
yarn config set network-concurrency 1 && \
2025-Aug-24 23:12:37.626633
yarn config set network-retry 10 && \
2025-Aug-24 23:12:37.626633
yarn config set strict-ssl true && \
2025-Aug-24 23:12:37.626633
# Try multiple registries as fallback (npmjs -> yarnpkg -> npmmirror -> no-lockfile)
2025-Aug-24 23:12:37.626633
(yarn config set registry https://registry.npmjs.org/ && yarn install --network-timeout 300000) || \
2025-Aug-24 23:12:37.626633
(yarn config set registry https://registry.yarnpkg.com/ && yarn install --network-timeout 300000) || \
2025-Aug-24 23:12:37.626633
(yarn config set registry https://registry.npmmirror.com/ && yarn install --network-timeout 300000) || \
2025-Aug-24 23:12:37.626633
(yarn config set registry https://registry.npmjs.org/ && yarn install --no-lockfile --network-timeout 300000) && \
2025-Aug-24 23:12:37.626633
# Verify installation and install vite explicitly if missing
2025-Aug-24 23:12:37.626633
(yarn list vite || yarn add vite@^5.4.19 --dev --network-timeout 300000) && \
2025-Aug-24 23:12:37.626633
echo "Dependencies installed successfully"
2025-Aug-24 23:12:37.626633
# Copy source code
2025-Aug-24 23:12:37.626633
COPY . .
2025-Aug-24 23:12:37.626633
# Build the application using yarn
2025-Aug-24 23:12:37.626633
RUN yarn build
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Production stage
2025-Aug-24 23:12:37.626633
FROM nginx:alpine
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Install curl for health checks
2025-Aug-24 23:12:37.626633
RUN apk add --no-cache curl
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Copy built files
2025-Aug-24 23:12:37.626633
COPY --from=builder /app/dist /usr/share/nginx/html
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Copy nginx configuration
2025-Aug-24 23:12:37.626633
COPY nginx.conf /etc/nginx/conf.d/default.conf
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Create nginx user and set permissions
2025-Aug-24 23:12:37.626633
RUN chown -R nginx:nginx /usr/share/nginx/html && \
2025-Aug-24 23:12:37.626633
chmod -R 755 /usr/share/nginx/html
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Expose port
2025-Aug-24 23:12:37.626633
EXPOSE 80
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Health check
2025-Aug-24 23:12:37.626633
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
2025-Aug-24 23:12:37.626633
CMD curl -f http://localhost/health || exit 1
2025-Aug-24 23:12:37.626633
2025-Aug-24 23:12:37.626633
# Start nginx
2025-Aug-24 23:12:37.626633
CMD ["nginx", "-g", "daemon off;"]
2025-Aug-24 23:12:37.799178
----------------------------------------
2025-Aug-24 23:12:37.804954
Building docker image started.
2025-Aug-24 23:12:37.811243
To check the current progress, click on Show Debug Logs.
2025-Aug-24 23:12:38.136323
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'cat /artifacts/build.sh'
2025-Aug-24 23:12:38.136323
docker build  --add-host coolify:10.0.1.4 --add-host coolify-db:10.0.1.3 --add-host coolify-realtime:10.0.1.5 --add-host coolify-redis:10.0.1.6 --network host -f /artifacts/s8kwsgsw0wcgos8og08088c0/Dockerfile --build-arg SOURCE_COMMIT='be8d8d3cf434a66b7392b7a5d076f35380faadaa' --build-arg 'COOLIFY_URL=https://rankhub.smartexautomacoes.online' --build-arg 'COOLIFY_FQDN=rankhub.smartexautomacoes.online' --build-arg 'COOLIFY_BRANCH=main' --build-arg 'COOLIFY_RESOURCE_UUID=y8k8ckowcggooc440ogskkok' --build-arg 'COOLIFY_CONTAINER_NAME=y8k8ckowcggooc440ogskkok-231231275626' --progress plain -t y8k8ckowcggooc440ogskkok:be8d8d3cf434a66b7392b7a5d076f35380faadaa /artifacts/s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:38.646770
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'bash /artifacts/build.sh'
2025-Aug-24 23:12:38.646770
#0 building with "default" instance using docker driver
2025-Aug-24 23:12:38.646770
2025-Aug-24 23:12:38.646770
#1 [internal] load build definition from Dockerfile
2025-Aug-24 23:12:38.646770
#1 transferring dockerfile: 2.31kB done
2025-Aug-24 23:12:38.646770
#1 DONE 0.0s
2025-Aug-24 23:12:38.646770
2025-Aug-24 23:12:38.646770
#2 [internal] load metadata for docker.io/library/node:18-alpine
2025-Aug-24 23:12:39.116572
#2 DONE 0.6s
2025-Aug-24 23:12:39.116572
2025-Aug-24 23:12:39.116572
#3 [internal] load metadata for docker.io/library/nginx:alpine
2025-Aug-24 23:12:39.245392
#3 DONE 0.6s
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#4 [internal] load .dockerignore
2025-Aug-24 23:12:39.245392
#4 transferring context: 1.72kB done
2025-Aug-24 23:12:39.245392
#4 DONE 0.0s
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#5 [builder 1/7] FROM docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc4b8ca09d9e
2025-Aug-24 23:12:39.245392
#5 DONE 0.0s
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#6 [stage-1 1/5] FROM docker.io/library/nginx:alpine@sha256:42a516af16b852e33b7682d5ef8acbd5d13fe08fecadc7ed98605ba5e3b26ab8
2025-Aug-24 23:12:39.245392
#6 DONE 0.0s
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#7 [internal] load build context
2025-Aug-24 23:12:39.245392
#7 transferring context: 1.13MB 0.0s done
2025-Aug-24 23:12:39.245392
#7 DONE 0.1s
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#8 [builder 4/7] COPY package*.json ./
2025-Aug-24 23:12:39.245392
#8 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#9 [builder 7/7] RUN yarn build
2025-Aug-24 23:12:39.245392
#9 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#10 [stage-1 3/5] COPY --from=builder /app/dist /usr/share/nginx/html
2025-Aug-24 23:12:39.245392
#10 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#11 [builder 6/7] COPY . .
2025-Aug-24 23:12:39.245392
#11 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#12 [builder 2/7] WORKDIR /app
2025-Aug-24 23:12:39.245392
#12 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#13 [stage-1 4/5] COPY nginx.conf /etc/nginx/conf.d/default.conf
2025-Aug-24 23:12:39.245392
#13 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#14 [builder 5/7] RUN set -e && rm -rf /usr/local/bin/npm /usr/local/bin/npx && rm -rf ~/.npm ~/.yarn-cache ~/.cache && rm -rf node_modules && yarn config set network-timeout 300000 && yarn config set network-concurrency 1 && yarn config set network-retry 10 && yarn config set strict-ssl true && (yarn config set registry https://registry.npmjs.org/ && yarn install --network-timeout 300000) || (yarn config set registry https://registry.yarnpkg.com/ && yarn install --network-timeout 300000) || (yarn config set registry https://registry.npmmirror.com/ && yarn install --network-timeout 300000) || (yarn config set registry https://registry.npmjs.org/ && yarn install --no-lockfile --network-timeout 300000) && (yarn list vite || yarn add vite@^5.4.19 --dev --network-timeout 300000) && echo "Dependencies installed successfully"
2025-Aug-24 23:12:39.245392
#14 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#15 [stage-1 2/5] RUN apk add --no-cache curl
2025-Aug-24 23:12:39.245392
#15 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#16 [builder 3/7] RUN apk add --no-cache python3 make g++ yarn git curl ca-certificates openssl && update-ca-certificates
2025-Aug-24 23:12:39.245392
#16 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#17 [stage-1 5/5] RUN chown -R nginx:nginx /usr/share/nginx/html &&     chmod -R 755 /usr/share/nginx/html
2025-Aug-24 23:12:39.245392
#17 CACHED
2025-Aug-24 23:12:39.245392
2025-Aug-24 23:12:39.245392
#18 exporting to image
2025-Aug-24 23:12:39.245392
#18 exporting layers done
2025-Aug-24 23:12:39.245392
#18 writing image sha256:ee4313e8febcf81774a87c6393ba1892644036f589f791b1eebc354152672477 done
2025-Aug-24 23:12:39.245392
#18 naming to docker.io/library/y8k8ckowcggooc440ogskkok:be8d8d3cf434a66b7392b7a5d076f35380faadaa done
2025-Aug-24 23:12:39.245392
#18 DONE 0.0s
2025-Aug-24 23:12:39.261139
Building docker image completed.
2025-Aug-24 23:12:39.266311
----------------------------------------
2025-Aug-24 23:12:39.271072
Rolling update started.
2025-Aug-24 23:12:39.527554
[CMD]: docker exec s8kwsgsw0wcgos8og08088c0 bash -c 'SOURCE_COMMIT=be8d8d3cf434a66b7392b7a5d076f35380faadaa COOLIFY_URL=https://rankhub.smartexautomacoes.online COOLIFY_FQDN=rankhub.smartexautomacoes.online COOLIFY_BRANCH=main  docker compose --project-name y8k8ckowcggooc440ogskkok --project-directory /artifacts/s8kwsgsw0wcgos8og08088c0 -f /artifacts/s8kwsgsw0wcgos8og08088c0/docker-compose.yaml up --build -d'
2025-Aug-24 23:12:39.527554
time="2025-08-24T23:12:39Z" level=warning msg="Found orphan containers ([y8k8ckowcggooc440ogskkok-230650650332]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up."
2025-Aug-24 23:12:39.527554
Container y8k8ckowcggooc440ogskkok-231231275626  Creating
2025-Aug-24 23:12:39.578361
y8k8ckowcggooc440ogskkok-231231275626 Your kernel does not support memory swappiness capabilities or the cgroup is not mounted. Memory swappiness discarded.
2025-Aug-24 23:12:39.581533
Container y8k8ckowcggooc440ogskkok-231231275626  Created
2025-Aug-24 23:12:39.584628
Container y8k8ckowcggooc440ogskkok-231231275626  Starting
2025-Aug-24 23:12:39.831981
Container y8k8ckowcggooc440ogskkok-231231275626  Started
2025-Aug-24 23:12:39.843872
New container started.
2025-Aug-24 23:12:39.850064
Custom healthcheck found, skipping default healthcheck.
2025-Aug-24 23:12:39.855810
Waiting for healthcheck to pass on the new container.
2025-Aug-24 23:12:39.859612
Waiting for the start period (5 seconds) before starting healthcheck.
2025-Aug-24 23:12:44.973633
[CMD]: docker inspect --format='{{json .State.Health.Status}}' y8k8ckowcggooc440ogskkok-231231275626
2025-Aug-24 23:12:44.973633
"healthy"
2025-Aug-24 23:12:45.086920
[CMD]: docker inspect --format='{{json .State.Health.Log}}' y8k8ckowcggooc440ogskkok-231231275626
2025-Aug-24 23:12:45.086920
[{"Start":"2025-08-24T23:12:44.831119159Z","End":"2025-08-24T23:12:44.886824583Z","ExitCode":0,"Output":"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0healthy\n\r100     8  100     8    0     0   8537      0 --:--:-- --:--:-- --:--:--  8000\n"}]
2025-Aug-24 23:12:45.094026
Attempt 1 of 3 | Healthcheck status: "healthy"
2025-Aug-24 23:12:45.099676
Healthcheck logs:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
2025-Aug-24 23:12:45.099676
Dload  Upload   Total   Spent    Left  Speed
2025-Aug-24 23:12:45.099676
0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0healthy
2025-Aug-24 23:12:45.099676
100     8  100     8    0     0   8537      0 --:--:-- --:--:-- --:--:--  8000
2025-Aug-24 23:12:45.099676
| Return code: 0
2025-Aug-24 23:12:45.109073
New container is healthy.
2025-Aug-24 23:12:45.114128
Removing old containers.
2025-Aug-24 23:12:45.555874
[CMD]: docker stop --time=30 y8k8ckowcggooc440ogskkok-230650650332
2025-Aug-24 23:12:45.555874
y8k8ckowcggooc440ogskkok-230650650332
2025-Aug-24 23:12:45.672930
[CMD]: docker rm -f y8k8ckowcggooc440ogskkok-230650650332
2025-Aug-24 23:12:45.672930
y8k8ckowcggooc440ogskkok-230650650332
2025-Aug-24 23:12:45.676960
Rolling update completed.
2025-Aug-24 23:12:46.016248
Gracefully shutting down build container: s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:46.330990
[CMD]: docker stop --time=30 s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:46.330990
s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:46.453232
[CMD]: docker rm -f s8kwsgsw0wcgos8og08088c0
2025-Aug-24 23:12:46.453232
Error response from daemon: No such container: s8kwsgsw0wcgos8og08088c0